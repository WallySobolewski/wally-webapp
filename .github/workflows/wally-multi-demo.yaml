# create pipeline with some name
name: wally multipjob project demo pipeline
# trigger section - when the pipeline should start
on:
  push:
    branches:
      - "dev"

#creating multiple jobs
jobs:
  wally-sast-job:
    runs-on: self-hosted
    steps:
      - name: checking docker version and sonarscanner
        run: |
          pwd
          whoami
          sonar-scanner --version
      - name: retrieve github code
        uses: actions/checkout@v4
      - name: local sonarqube scan
        run: |
          pwd
          sonar-scanner.bat -D"sonar.projectKey=wally-multi-demo" -D"sonar.sources=." -D"sonar.host.url=http://44.219.46.64:9000/" -D"sonar.token=sqp_0074b5aeed064dc7fc283433cc79068176f73167"
      - name: use upload artifacts # to save and use artifacts in the next job
        uses: actions/upload-artifact@v4
        with:
          name: wally-artifact
          path: |
            .
            !**/.git*
            !**/*.md
            !**/.scannerwork
  wally-build-job:
    runs-on: ubuntu-latest
    needs: wally-sast-job
    steps:
      - name: general checks
        run: |
          echo "docker related details"
          docker version
          docker-compose --version
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: wally-artifact
          path: .
      - name: docker compose to build and test
        run: |
          ls -a
          docker-compose up -d --build
          sleep 2
          docker-compose ps
      - name: verify HC page by access it using curl
        run: |
          echo "Checking HC page"
          curl --head --silent http://localhost:1984/health.html | head -n 1
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 #v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: build, tag and push docker image to aws ecr
        env:
          REGISTRY: 751136288263.dkr.ecr.us-east-1.amazonaws.com
          REPOSITORY: bmo-webui-app
          IMAGE_TAG: wallywebuiV2
        run: |
          docker image ls
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 751136288263.dkr.ecr.us-east-1.amazonaws.com
          docker tag wally-webui:version5 751136288263.dkr.ecr.us-east-1.amazonaws.com/bmo-webui-app:wallywebuiV2
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
